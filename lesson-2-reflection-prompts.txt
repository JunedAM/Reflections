What happens when you initialize a repository? Why do you need to do it?
Initializing a repository converts a directory to a git respository. It creates a ".git" file that tracks the versions of respository through changes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
Staging allows in committing a particular set of files instead of whole repository at one. This will help in creating versions which are more logical.

How can you use the staging area to make sure you have one commit per logical
change?
after adding the files to staging area, I can see the difference between staged files and last commit by using "git diff --staged". He it needs to be ensured that the files staged for committing are logically linked before committing. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
It is helpful to create branches when the changes you are going to make in the project are not necessarily for an updated version, but for a different variant. For example: Easy mode in the game.

How do the diagrams help you visualize the branch structure?
Using diagrams I can see the point at which new branch was created and the changes made in the main branch after the new branch was created.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
